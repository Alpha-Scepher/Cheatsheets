sudo apt update
sudo apt install cron
sudo systemctl enable cron

											## Cron jobs are recorded and managed in a special file known as a crontab. 
											## Each user profile on the system can have their own crontab where they can schedule jobs which is stored under /var/spool/cron/crontabs/
											## we will use it here to run cloudflared-ddns.sh script to automatically update your DDNS records! 

cd /etc 
mkdir cloudflared-ddns
cd cloudflared-ddns
mkdir logs								 	## logs the output of the cloudflared-ddns.sh script ( opiopnal ) 
sudo nano cloudflared-ddns.sh

										## How to use/edit this script :
--------------------------------
auth_email="youremail@example.com"       	## The email used to login 'https://dash.cloudflare.com'
auth_method="global"                     	## Set to "global" for Global API Key or "token" for Scoped API Token
auth_key="*"                             	## Your API Token or Global API Key
zone_identifier="Zone API"               	## Can be found in the "Overview" tab of your domain
record_name="your-domain.com"            	## Which record you want to be synced
ttl="3600"                               	## Set the DNS TTL (seconds)
proxy="false"                            	## Set the proxy to true or false
sitename="your-domain.com"               	## Title of site "Example Site"
slackchannel=""                          	## Slack Channel #example
slackuri=""                              	## URI for Slack WebHook "https://hooks.slack.com/services/xxxxx"
discorduri=""                            	## URI for Discord WebHook "https://discordapp.com/api/webhooks/xxxxx"

------------------------------------------
											## add the rest of the script 

CTRL + O 
Enter 
CTRL + X

sudo chmod u+x cloudflared-ddns.sh

		## go to cloudflare & make a A record for your domain/sub-domain, input your current public IP to the IPv4 Section
		## to get your current public ip run ( $ dig +short txt ch whoami.cloudflare @1.0.0.1 )

											##  minute hour day_of_month month day_of_week command_to_run
											##  30 17 * * 2 curl http://www.google.com
											##  Here are some more examples of how to use cronâ€™s scheduling component:
											##	* * * * * - Run the command every minute.
											##	12 * * * * - Run the command 12 minutes after every hour.
											##	0,15,30,45 * * * * - Run the command every 15 minutes.
											##	*/15 * * * * - Run the command every 15 minutes.
											##	0 4 * * * - Run the command every day at 4:00 AM.
											##	0 4 * * 2-4 - Run the command every Tuesday, Wednesday, and Thursday at 4:00 AM.
											##	20,40 */8 * 7-12 * - Run the command on the 20th and 40th minute of every 8th hour every day of the last 6 months of the year.
				
*/15 * * * * /etc/cloudflared-ddns/cloudflared-ddns.sh > /etc/cloudflared-ddns/logs/ddns.log 2>&1

											## done!
											## the full script is below or you can get it from https://github.com/K0p1-Git/cloudflare-ddns-updater/tree/main
											
							#!/bin/bash
					## change to "bin/sh" when necessary

					auth_email=""                                       # The email used to login 'https://dash.cloudflare.com'
					auth_method="token"                                 # Set to "global" for Global API Key or "token" for Scoped API Token
					auth_key=""                                         # Your API Token or Global API Key
					zone_identifier=""                                  # Can be found in the "Overview" tab of your domain
					record_name=""                                      # Which record you want to be synced
					ttl="3600"                                          # Set the DNS TTL (seconds)
					proxy="false"                                       # Set the proxy to true or false
					sitename=""                                         # Title of site "Example Site"
					slackchannel=""                                     # Slack Channel #example
					slackuri=""                                         # URI for Slack WebHook "https://hooks.slack.com/services/xxxxx"
					discorduri=""                                       # URI for Discord WebHook "https://discordapp.com/api/webhooks/xxxxx"


					###########################################
					## Check if we have a public IP
					###########################################
					ipv4_regex='([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])'
					ip=$(curl -s -4 https://cloudflare.com/cdn-cgi/trace | grep -E '^ip'); ret=$?
					if [[ ! $ret == 0 ]]; then # In the case that cloudflare failed to return an ip.
						# Attempt to get the ip from other websites.
						ip=$(curl -s https://api.ipify.org || curl -s https://ipv4.icanhazip.com)
					else
						# Extract just the ip from the ip line from cloudflare.
						ip=$(echo $ip | sed -E "s/^ip=($ipv4_regex)$/\1/")
					fi

					# Use regex to check for proper IPv4 format.
					if [[ ! $ip =~ ^$ipv4_regex$ ]]; then
						logger -s "DDNS Updater: Failed to find a valid IP."
						exit 2
					fi

					###########################################
					## Check and set the proper auth header
					###########################################
					if [[ "${auth_method}" == "global" ]]; then
					  auth_header="X-Auth-Key:"
					else
					  auth_header="Authorization: Bearer"
					fi

					###########################################
					## Seek for the A record
					###########################################

					logger "DDNS Updater: Check Initiated"
					record=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records?type=A&name=$record_name" \
										  -H "X-Auth-Email: $auth_email" \
										  -H "$auth_header $auth_key" \
										  -H "Content-Type: application/json")

					###########################################
					## Check if the domain has an A record
					###########################################
					if [[ $record == *"\"count\":0"* ]]; then
					  logger -s "DDNS Updater: Record does not exist, perhaps create one first? (${ip} for ${record_name})"
					  exit 1
					fi

					###########################################
					## Get existing IP
					###########################################
					old_ip=$(echo "$record" | sed -E 's/.*"content":"(([0-9]{1,3}\.){3}[0-9]{1,3})".*/\1/')
					# Compare if they're the same
					if [[ $ip == $old_ip ]]; then
					  logger "DDNS Updater: IP ($ip) for ${record_name} has not changed."
					  exit 0
					fi

					###########################################
					## Set the record identifier from result
					###########################################
					record_identifier=$(echo "$record" | sed -E 's/.*"id":"([A-Za-z0-9_]+)".*/\1/')

					###########################################
					## Change the IP@Cloudflare using the API
					###########################################
					update=$(curl -s -X PATCH "https://api.cloudflare.com/client/v4/zones/$zone_identifier/dns_records/$record_identifier" \
										 -H "X-Auth-Email: $auth_email" \
										 -H "$auth_header $auth_key" \
										 -H "Content-Type: application/json" \
										 --data "{\"type\":\"A\",\"name\":\"$record_name\",\"content\":\"$ip\",\"ttl\":\"$ttl\",\"proxied\":${proxy}}")

					###########################################
					## Report the status
					###########################################
					case "$update" in
					*"\"success\":false"*)
					  echo -e "DDNS Updater: $ip $record_name DDNS failed for $record_identifier ($ip). DUMPING RESULTS:\n$update" | logger -s 
					  if [[ $slackuri != "" ]]; then
						curl -L -X POST $slackuri \
						--data-raw '{
						  "channel": "'$slackchannel'",
						  "text" : "'"$sitename"' DDNS Update Failed: '$record_name': '$record_identifier' ('$ip')."
						}'
					  fi
					  if [[ $discorduri != "" ]]; then
						curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST \
						--data-raw '{
						  "content" : "'"$sitename"' DDNS Update Failed: '$record_name': '$record_identifier' ('$ip')."
						}' $discorduri
					  fi
					  exit 1;;
					*)
					  logger "DDNS Updater: $ip $record_name DDNS updated."
					  if [[ $slackuri != "" ]]; then
						curl -L -X POST $slackuri \
						--data-raw '{
						  "channel": "'$slackchannel'",
						  "text" : "'"$sitename"' Updated: '$record_name''"'"'s'""' new IP Address is '$ip'"
						}'
					  fi
					  if [[ $discorduri != "" ]]; then
						curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST \
						--data-raw '{
						  "content" : "'"$sitename"' Updated: '$record_name''"'"'s'""' new IP Address is '$ip'"
						}' $discorduri
					  fi
					  exit 0;;
					esac
